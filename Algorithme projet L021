  
Algorithme projet LO21:


Lexique InitializeIndivIteratif:

Individu est une liste de bit
aléatoire renvoie un nombre entier naturelle aléatoire

Fonction InitializeIndivItératif(longueur: Entier)<-Individu
Début
Individu:liste<Bit><- createListe()
Si(longueur>0)
	last:element<- CreateElement()
	valeur(last)<-aléatoire modulo 2
	suivant(last)<- indéfini
	tete(Individu)<-last
	newel:element<-indéfini
	Pour i allant de 1 à longueur-1 avec un pas de 1
		newel<-createElement()
		valeur(newel)<-aléatoire modulo 2
		suivant(newel)<-indéfini
		suivant(last)<-newel
		last<-suivant(last)
	Fin Pour
Fin Si
InitializeIndivIteratif<-Individu
Fin



Lexique InitializeIndivrécursif:

Individu est une liste de bit
aléatoire renvoie un nombre entier naturelle aléatoire
p est un element de la liste de bit

Fonction _creer_recursif(longueur:Entier,Element p)
Début
Si(longueur>0)
	next:element<-createElement()
	valeur(next)<-aléatoire modulo 2
	suivant(p)<-next
	_creer_recursif(longueur-1,next)
Sinon
	suivant(p)<-indefini
Fin
 
Fonction  creer_individu_recursif(longueur:entier)<-Individu
Debut
Individu:liste<Bit><-createListe()
Si(longueur>0)
	newel:element <-CreateElement()
	valeur(newel)<-aléatoire modulo 2
	suivant(newel)<-indéfini
	tete(Individu)<-newel
 	_creer_recursif(longueur,newel)
	creer_individu_recursif<-Individu
Sinon
	creer_individu_recursif<-Individu
Fin



lexique binaire_to_decimal:

Individu est une liste de bit
p est un element de cette liste

Fonction binaire_to_decimal (Individu:liste<bit>)<-Entier
Debut
result:entier<-0
i:entier<-0
p:element<-tete(Individu)
Tant que p!=indéfini
	result<-result+valeur(p)*puissance(2,i)
	i<-i+1
	p<-suivant(p)
Fin Tant que
binaire_to_decimal<-result
Fin


	
lexique croiser_individus

Individu est un type abstrait, il s'agit d'une liste de bit
probabilité est un nombre reel compris entre 0 et 100
aléatoire renvoie un nombre entier naturelle aléatoire

Fonction croiser_individus(a:Individu,b:Individu,probabilite:reel positif)
Debut
ela:element<-tete(a)
elb:element<-tete(b)
tirage:reel positif<-aléatoire modulo 100
temp:Bit
Si (tirage<probabilité)
	temp<-valeur(ela)
	valeur(ela)<-valeur(elb)
	valeur(elb)<-temp

	ela<-suivant(ela)
	elb<-suivant(elb)
Fin Si
FIn




	