  
Algorithme projet LO21:


Lexique InitializeIndivIteratif:

Individu est une liste de bit
aléatoire renvoie un nombre entier naturelle aléatoire
last est un élément de la liste Individu
newel est un élément de la liste Individu

Fonction InitializeIndivItératif(longueur: Entier)<-Individu
Début
Individu:liste<Bit><- createListe()
Si(longueur>0)
	last:element<- CreateElement()
	valeur(last)<-aléatoire modulo 2
	suivant(last)<- indéfini
	tete(Individu)<-last
	newel:élément<-indéfini
	Pour i allant de 1 à longueur-1 avec un pas de 1
		newel<-createElement()
		valeur(newel)<-aléatoire modulo 2
		suivant(newel)<-indéfini
		suivant(last)<-newel
		last<-suivant(last)
	Fin Pour
Fin Si
InitializeIndivIteratif<-Individu
Fin



Lexique InitializeIndivrécursif:

Individu est une liste de bit
aléatoire renvoie un nombre entier naturelle aléatoire
p est un élément de la liste de bit

Fonction _creer_recursif(longueur:Entier,p:élément)
Début
Si(longueur>0)
	next:élément<-createElement()
	valeur(next)<-aléatoire modulo 2
	suivant(p)<-next
	_creer_recursif(longueur-1,next)
Sinon
	suivant(p)<-indefini
Fin
 
Fonction  creer_individu_recursif(longueur:entier)<-Individu
Début
Individu:liste<Bit><-createListe()
Si(longueur>0)
	newel:élément <-CreateElement()
	valeur(newel)<-aléatoire modulo 2
	suivant(newel)<-indéfini
	tete(Individu)<-newel
 	_creer_recursif(longueur,newel)
	creer_individu_recursif<-Individu
Sinon
	creer_individu_recursif<-Individu
Fin



lexique binaire_to_decimal:

Individu est une liste de bit
p est un élément de cette liste
puissance est une fonction qui prend deux parametres (p,n) et qui renvoi a^n, elle sera explicitée ci-dessous

Fonction binaire_to_decimal (Individu:liste<bit>)<-Entier
Début
result:entier<-0
i:entier<-0
p:élément<-tete(Individu)
Tant que p!=indéfini
	result<-result+valeur(p)*puissance(2,i)
	i<-i+1
	p<-suivant(p)
Fin Tant que
binaire_to_decimal<-result
Fin


	
Fonction puissance(p<entier>,n<entier>)<-entier
Debut
Si n=0
	puissance<-1
Sinon 
	puissance<-puissance(p,n-1)*p
Fin si
Fin



lexique croiser_individus

Individu est un type abstrait, il s'agit d'une liste de bit
probabilité est un nombre reel compris entre 0 et 100
aléatoire renvoie un nombre entier naturelle aléatoire

Fonction croiser_individus(a:Individu,b:Individu,probabilite:reel positif)
Début
ela:élément<-tete(a)
elb:élément<-tete(b)
tirage:reel positif<-aléatoire modulo 100
temp:Bit
Si (tirage<probabilité)
	temp<-valeur(ela)
	valeur(ela)<-valeur(elb)
	valeur(elb)<-temp
	ela<-suivant(ela)
	elb<-suivant(elb)
Fin Si
Fin



lexique qualite_individu

Individu est une liste de bit
longueur est le nombre de bit dont est composé l'individu
A et B sont des constante entière naturelle
cos est la fonction cosinus
ln est le logarithme néperien

Fonction qualite_individu(a:Individu<liste>)<-réel
Début
valeur:réel<-(binaire_to_decimal(a)/puissance(longueur,2))*(B-A)+A
qualite_individu<-(-puissance(valeur,2))
/* Variante: qualite_individu<-(-ln(valeur)) 
ou qualite_individu<-(-cos(valeur)) */
Fin



lexique creer_population

taille est la taille de la population désirée
population est une liste d'individu qui est lui-même une liste de bit
popElement est un élément de la liste population
longueur est une constante entière naturelle qui indique le nombre de bit que contient la liste individu

Fonction creer_population(taille:entier)<-Population
Debut
a:Population<liste><-createListe
Si(taille>0)
	popElement:élément<-createElement
	valeur(popElement)<-creer_individu(longueur)
	suivant(popElement)<-indefini
	tete(a)<-popElement
	next:élément<-indéfini
	pour i allant de 1 à taille-1 avec un pas de 1
		next<-createElement
		valeur(next)<-creer_individu(longueur)
		suivant(next)<-indéfini
		suivant(popElement)<-next
		popElement<-suivant(popElement)
	Fin Pour
Fin Si
Fin









	